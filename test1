using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace sex
{
    class Program
    {
        static void Main(string[] args)
        {
            var sl = new SinglyLinkedList();
            var s2 = new SinglyLinkedList();
            var a = new Node("A");
            sl.AddToHead(a);
            sl.AddToHead(new Node("B"));
            sl.AddToHead(new Node("C"));
            sl.AddToHead(new Node("ZALDY"));
            sl.AddToHead(new Node("E"));
            s2.AddToHead(new Node("A"));
            s2.AddToHead(new Node("B"));
            s2.AddToHead(new Node("C"));
            s2.AddToHead(new Node("D"));
            s2.AddToHead(new Node("E"));
            //sl.AddToTail(new Node("-A"));
            //sl.DeleteFromHead();
            //sl.PrintNode(sl);
            //sl.AddToTail(new Node("-B"));
            //sl.AddToTail(new Node("-C"));
            s2.slComparerTest1(s2, sl);

            sl.PrintNode(sl);
            s2.PrintNode(s2);
            Console.ReadLine();
        }
        public class Node
        {
            public string Data { get; set; }
            public Node Next { get; set; }
            public Node()
            {
            }
            public Node(string data)
            {
                Data = data;
            }
        }
        public class SinglyLinkedList
        {
            public Node Head { get; set; }
            public Node Tail { get; set; }
            public int Count { get; set; }
            public Node Temp { get; set; }

            //method
            public void AddToHead(Node node)
            {
                node.Next = Head;
                Head = node;
                if (Tail == null)
                {
                    Tail = Head;
                }
                Count++;
            }
            public void AddToTail(Node node)
            {
                if (Head == null)
                {
                    Head = node;
                    Tail = Head;

                }
                else
                {
                    Tail.Next = node;
                    Tail = node;
                }
            }
            public void PrintNode(SinglyLinkedList singlyLinkedList)
            {
                if (Tail == null)
                {
                    Console.WriteLine("Added to sl(head) {0}", singlyLinkedList.Head.Data);
                }
                else
                {

                    var temp = Head;
                    Console.Write("From Head to Tail ");
                    while (temp != null)
                    {
                        Console.Write(temp.Data);
                        temp = temp.Next;
                    }
                    Console.WriteLine();






                    //    Node prev = null;
                    //    Node current = Head;
                    //    Node nextNode = null;
                    //    while (current != null)
                    //    {
                    //        nextNode = current.Next;
                    //        current.Next = prev;
                    //        prev = current;
                    //        current = nextNode;
                    //    }
                    //    Head = prev;
                    //    while(Head.Next != null)
                    //    {
                    //        Console.WriteLine("Added To head {0}",Head.Data);
                    //        Head = Head.Next;
                    //    }
                    //    //head to tail
                    //    Node prevA = null;
                    //    Node currentA = Tail;
                    //    Node nextNodeA = null;
                    //    while (current != null)
                    //    {
                    //        prevA = currentA.Next;
                    //        currentA.Prev = nextNodeA;
                    //        nextNodeA = currentA;
                    //        currentA = prevA;
                    //    }

                    //    Console.Write("From Head to Tail  ");
                    //while (Head.Prev != null)
                    //{
                    //    Console.Write(Head.Data);
                    //        Head = Head.Prev;
                    //}
                    //Console.WriteLine(singlyLinkedList.Tail.Data);
                }


            }
            //drawing
            public void DeleteFromHead()
            {

                if (Head == Tail)
                {
                    Tail = null;
                }
                var temp = Head;
                Head = Head.Next;
                temp = null;

            }

            public void slComparerTest1(SinglyLinkedList s1Test, SinglyLinkedList s2Test)
            {
                //Node tmp = s1Test.Head;
                //Node tmp2 = s2Test.Head;
                //while (tmp != null && tmp2 != null)
                //{
                //    if (tmp.Data == tmp2.Data)
                //    {
                //        tmp = tmp.Next;
                //        tmp2 = tmp2.Next;
                //    }
                //    if(tmp.Data.Equals(tmp2.Data))
                //    {
                //        Console.WriteLine("Not Same");
                //    }
                //}
                //Console.WriteLine("Same");
                int b = 0;
                Node tmp = s1Test.Head;
                Node tmp2 = s2Test.Head;
                while(tmp != null && tmp2 != null)
                {
                    if (tmp.Data == tmp2.Data)
                    {
                        tmp = tmp.Next;
                        tmp2 = tmp2.Next;
                        b++;
                    }
                    else
                    {
                        b = 0;
                        tmp = null;
                        tmp2 = null;
                    }
                    
                }
                if(b == s1Test.Count)
                {
                    Console.WriteLine("True");
                }
                else
                {
                    Console.WriteLine("False");
                }
            }
        }
    }
}

