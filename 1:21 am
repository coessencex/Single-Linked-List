using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PExer01
{
    class Program
    {

           static void Main(string[] args)
        {
            var s1 = new SinglyLinkedList();
            var s2 = new SinglyLinkedList();
            s1.AddToHead(new Node("A"));
            s1.AddToHead(new Node("B"));
            s1.AddToHead(new Node("C"));
            s2.AddToHead(new Node("B"));
            s2.AddToHead(new Node("A"));
            s2.AddToHead(new Node("C"));
            //sl.AddToTail(new Node("-A"));
            //sl.DeleteFromHead();
            //sl.PrintNode(sl);
            //sl.AddToTail(new Node("-B"));
            //sl.AddToTail(new Node("-C"));
            s1.PrintNode(s1);
            s2.PrintNode(s2);
            s2.SlComparerTestForSameNodeSameOrder(s2, s1);
            s2.ReverseSl(s2);
            s2.Attach2Sl(s1,s2);
            Console.ReadLine();
        }
        public class Node
        {
            public string Data { get; set; }
            public Node Next { get; set; }
            public Node()
            {
            }
            public Node(string data)
            {
                Data = data;
            }
        }
        public class SinglyLinkedList
        {
            public Node Head { get; set; }
            public Node Tail { get; set; }
            public int Count { get; set; }
            public Node Temp { get; set; }

            //method
            public void AddToHead(Node node)
            {
                node.Next = Head;
                Head = node;
                if (Tail == null)
                {
                    Tail = Head;
                }
                Count++;
            }
            public void AddToTail(Node node)
            {
                if (Head == null)
                {
                    Head = node;
                    Tail = Head;

                }
                else
                {
                    Tail.Next = node;
                    Tail = node;
                }
            }
            public void PrintNode(SinglyLinkedList singlyLinkedList)
            {
                if (Tail == null)
                {
                    Console.WriteLine("Added to sl(head) {0}", singlyLinkedList.Head.Data);
                }
                else
                {
                    Node tempHeadforPN = singlyLinkedList.Head;
                    Node newHeadforPN = null;
                    while (tempHeadforPN != null)
                    {
                        Node recursiving = tempHeadforPN.Next;
                        tempHeadforPN.Next = newHeadforPN;
                        newHeadforPN = tempHeadforPN;
                        tempHeadforPN = recursiving;
                    }
                    singlyLinkedList.Head = newHeadforPN;
                    var temp = singlyLinkedList.Head;
                    
                    while (temp != null)
                    {
                        Console.WriteLine("{0} was added.",temp.Data);
                        temp = temp.Next;
                    }
                    Console.WriteLine();
                    Node tempHeadforoldPN = singlyLinkedList.Head;
                    Node newHeadforoldPN = null;
                    while (tempHeadforoldPN != null)
                    {
                        Node recursiving = tempHeadforoldPN.Next;
                        tempHeadforoldPN.Next = newHeadforoldPN;
                        newHeadforoldPN = tempHeadforoldPN;
                        tempHeadforoldPN = recursiving;
                    }
                    singlyLinkedList.Head = newHeadforoldPN;
                    var oldtemp = singlyLinkedList.Head;
                    Console.Write("Order From Head to Tail : [");
                    while (oldtemp != null)
                    {
                        Console.Write( oldtemp.Data + "");
                        oldtemp = oldtemp.Next;
                    }
                    Console.WriteLine("]");
                }
            }
            //drawing
            public void DeleteFromHead()
            {
                if (Head == Tail)
                {
                    Tail = null;
                }
                var temp = Head;
                Head = Head.Next;
                temp = null;
            }
            public void SlComparerTestForSameNodeSameOrder(SinglyLinkedList s1Test, SinglyLinkedList s2Test)
            {
                // checks if same number of Elements kek
                int b = 0;
                Node tmp = s1Test.Head;
                Node tmp2 = s2Test.Head;
                while(tmp != null && tmp2 != null)
                {
                    if (tmp.Data == tmp2.Data)
                    {
                        tmp = tmp.Next;
                        tmp2 = tmp2.Next;
                        b++;
                    }
                    else
                    {
                        b = 0;
                        tmp = null;
                        tmp2 = null;
                    }                
                }
                if(b == s1Test.Count)
                {
                    Console.WriteLine("The two singly linked list have same Content: [True] ");
                }
                else
                {
                    Console.WriteLine("The two singly linked list have same Content: [False]");
                }
            }
            //public void SlComparerTestForSameNodeNoOrder(SinglyLinkedList slkek1, SinglyLinkedList slkek2)
            //{
            //    Node kektemp = slkek1.Head;
            //    Node kektemp2 = slkek2.Head;
            //    while (kektemp != null && kektemp2 != null)
            //    {
            //        if (kektemp.Data != kektemp2.Data)
            //        {
            //            kektemp2 = kektemp2.Next;
            //            while (kektemp2 != null)
            //            {
            //                if (kektemp2)
            //            }
            //        }
            //    }

            //}
            public void ReverseSl(SinglyLinkedList rSl)
            {
                Node tempHead = rSl.Head;
                Node newHead = null;
                while (tempHead != null)
                {
                    Node recursiving = tempHead.Next;
                    tempHead.Next = newHead;
                    newHead = tempHead;
                    tempHead = recursiving;
                }
                rSl.Head = newHead;

                var temp = rSl.Head;
                Console.Write("From Tail To Head ");
                while (temp != null)
                {
                    Console.Write(temp.Data);
                    temp = temp.Next;
                }
                Console.WriteLine();

                //REVERSING REVERSING 
                Node tempHead2 = rSl.Head;
                Node oldHead = null;
                while (tempHead2 != null)
                {
                    Node recursiving = tempHead2.Next;
                    tempHead2.Next = oldHead;
                    oldHead = tempHead2;
                    tempHead2 = recursiving;
                }
                rSl.Head = oldHead;

            }
            public void Attach2Sl(SinglyLinkedList aSl, SinglyLinkedList aSl2)
            {
                //while(aSl2.Head != null)
                //{ 
                aSl.Tail.Next = aSl2.Head;
                //    aSl2.Head = aSl2.Head.Next;
                //}
                var temp = aSl.Head;
                Console.Write("From Head to Tail (2 linked list merge) ");
                while (temp != null)
                {
                    Console.Write(temp.Data);
                    temp = temp.Next;
                }
                Console.WriteLine();
            }
        }



    }
}
