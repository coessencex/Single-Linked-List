using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PExer01
{
    class Program
    {

        static void Main(string[] args)
        {
            var s1 = new SinglyLinkedList();
            var s2 = new SinglyLinkedList();
            s1.AddToHead(new Node("A"));
            s1.AddToHead(new Node("A"));
            s1.AddToHead(new Node("C"));
            s1.AddToHead(new Node("G"));
            s1.AddToHead(new Node("H"));
            s2.AddToHead(new Node("G"));
            s2.AddToHead(new Node("H"));
            s2.AddToHead(new Node("C"));
            s2.AddToHead(new Node("A"));
            s2.AddToHead(new Node("A"));
            //sl.AddToTail(new Node("-A"));
            //sl.DeleteFromHead();
            //sl.PrintNode(sl);
            //sl.AddToTail(new Node("-B"));
            //sl.AddToTail(new Node("-C"));
            s1.PrintNode(s1);
            s2.PrintNode(s2);
            s2.SlComparerTestForSameNodeSameOrder(s2, s1);
            s2.SlComparerTestForSameNodeNoOrder(s2, s1);
            s1.ReverseSl(s1);
            s2.ReverseSl(s2);
            s2.Attach2Sl(s1, s2);
            Console.ReadLine();
        }

        public class Node
        {
            public string Data { get; set; }
            public Node Next { get; set; }

            public Node()
            {
            }

            public Node(string data)
            {
                Data = data;
            }
        }

        public class SinglyLinkedList
        {
            public Node Head { get; set; }
            public Node Tail { get; set; }
            public int Count { get; set; }
            public Node Temp { get; set; }

            //method
            public void AddToHead(Node node)
            {
                node.Next = Head;
                Head = node;
                if (Tail == null)
                {
                    Tail = Head;
                }
                Count++;
            }

            public void AddToTail(Node node)
            {
                if (Head == null)
                {
                    Head = node;
                    Tail = Head;

                }
                else
                {
                    Tail.Next = node;
                    Tail = node;
                }
            }

            public void PrintNode(SinglyLinkedList singlyLinkedList)
            {
                Node tempHeadforPN = singlyLinkedList.Head;
                Node newHeadforPN = null;
                while (tempHeadforPN != null)
                {
                    Node recursiving = tempHeadforPN.Next;
                    tempHeadforPN.Next = newHeadforPN;
                    newHeadforPN = tempHeadforPN;
                    tempHeadforPN = recursiving;
                }
                singlyLinkedList.Head = newHeadforPN;
                var temp = singlyLinkedList.Head;

                while (temp != null)
                {
                    Console.WriteLine("{0} was added.", temp.Data);
                    temp = temp.Next;
                }
                Node tempHeadforoldPN = singlyLinkedList.Head;
                Node newHeadforoldPN = null;
                while (tempHeadforoldPN != null)
                {
                    Node recursiving = tempHeadforoldPN.Next;
                    tempHeadforoldPN.Next = newHeadforoldPN;
                    newHeadforoldPN = tempHeadforoldPN;
                    tempHeadforoldPN = recursiving;
                }
                singlyLinkedList.Head = newHeadforoldPN;
                var oldtemp = singlyLinkedList.Head;
                Console.Write("Order From Head to Tail : [");
                while (oldtemp != null)
                {
                    Console.Write(oldtemp.Data + "");
                    oldtemp = oldtemp.Next;
                }
                Console.WriteLine("]");
            }

            public void DeleteFromHead()
            {
                if (Head == Tail)
                {
                    Tail = null;
                }
                var temp = Head;
                Head = Head.Next;
                temp = null;
            }

            public void SlComparerTestForSameNodeSameOrder(SinglyLinkedList s1Test, SinglyLinkedList s2Test)
            {
                // checks if same number of Elements kek
                int b = 0;
                Node tmp = s1Test.Head;
                Node tmp2 = s2Test.Head;
                while (tmp != null && tmp2 != null)
                {
                    if (tmp.Data == tmp2.Data)
                    {
                        tmp = tmp.Next;
                        tmp2 = tmp2.Next;
                        b++;
                    }
                    else
                    {
                        b = 0;
                        tmp = null;
                        tmp2 = null;
                    }
                }
                if (b == s1Test.Count)
                {
                    Console.WriteLine();
                    Console.WriteLine("[COMPARISON] The two singly linked list have the same content and order.");
                }
                else
                {
                    Console.WriteLine();
                    Console.WriteLine("[COMPARISON] The two singly linked list does not have the same content and order.");
                }
            }

            public void ReverseSl(SinglyLinkedList rSl)
            {
                Node tempHead = rSl.Head;
                Node newHead = null;
                while (tempHead != null)
                {
                    Node recursiving = tempHead.Next;
                    tempHead.Next = newHead;
                    newHead = tempHead;
                    tempHead = recursiving;
                }
                rSl.Head = newHead;

                var temp = rSl.Head;
                Console.WriteLine();
                Console.Write("[REVERSE] From Tail To Head ");
                while (temp != null)
                {
                    Console.Write(temp.Data);
                    temp = temp.Next;
                }
                Console.WriteLine();

                //REVERSING REVERSING 
                Node tempHead2 = rSl.Head;
                Node oldHead = null;
                while (tempHead2 != null)
                {
                    Node recursiving = tempHead2.Next;
                    tempHead2.Next = oldHead;
                    oldHead = tempHead2;
                    tempHead2 = recursiving;
                }
                rSl.Head = oldHead;

            }

            public void Attach2Sl(SinglyLinkedList aSl, SinglyLinkedList aSl2)
            {
                Node tempHead = aSl2.Head;
                Node newHead = null;
                while (tempHead != null)
                {
                    Node recursiving = tempHead.Next;
                    tempHead.Next = newHead;
                    newHead = tempHead;
                    tempHead = recursiving;
                }
                aSl2.Head = newHead;
                aSl.Tail.Next = aSl2.Head;
                var temp = aSl.Head;
                Console.WriteLine();
                Console.Write("[2 linked list merged] Attached a singly linked list to the end of another singly linked list ");
                while (temp != null)
                {
                    Console.Write(temp.Data);
                    temp = temp.Next;
                }
                Console.WriteLine();
                Node tempHeadback2Orig = aSl2.Head;
                Node newHeadback2Orig = null;
                while (tempHeadback2Orig != null)
                {
                    Node recursiving = tempHeadback2Orig.Next;
                    tempHeadback2Orig.Next = newHeadback2Orig;
                    newHeadback2Orig = tempHeadback2Orig;
                    tempHeadback2Orig = recursiving;
                }
                aSl2.Head = newHeadback2Orig;
            }

            public void SlComparerTestForSameNodeNoOrder(SinglyLinkedList slkek1, SinglyLinkedList slkek2)
            {
                List<String> gg = new List<string>();
                List<String> gg2 = new List<string>();
                int z = 0;
                if (slkek1.Count != slkek2.Count)
                {
                    Console.WriteLine("[COMPARISON (Disregard Order)] The two singly linked list does not have the same content.");
                }
                if (slkek1.Count == slkek2.Count)
                {
                    var tempogg = slkek1.Head;
                    for (int i = 0; i < slkek1.Count; i++)
                    {
                        gg.Add(tempogg.Data);
                        tempogg = tempogg.Next;
                    }
                    var tempogg2 = slkek2.Head;
                    for (int i = 0; i < slkek2.Count; i++)
                    {
                        gg2.Add(tempogg2.Data);
                        tempogg2 = tempogg2.Next;
                    }
                    var first = gg.Except(gg2).ToList();
                    var second = gg2.Except(gg).ToList();
                    if (first.Count != second.Count)
                    {
                        Console.WriteLine("[COMPARISON (Disregard Order)] The two singly linked list does not have the same contents.");
                    }
                    else
                    {
                        Console.WriteLine("[COMPARISON (Disregard Order)] The two singly linked list does have the same contents.");

                    }
                }
            }
        }
    }
    }
